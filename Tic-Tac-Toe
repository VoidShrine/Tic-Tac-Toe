"""
Monte Carlo Tic-Tac-Toe Player
"""
import random
import poc_ttt_gui
import poc_ttt_provided as provided

# Constants for Monte Carlo simulator

NTRIALS = 10        # Number of trials to run
SCORE_CURRENT = 1.0 # Score for squares played by the current player
SCORE_OTHER = 1.0   # Score for squares played by the other player

def mc_trial(board, player):
    """
    This function takes a current board and the next player to move.
    """
    while board.check_win() == None:
        empty = board.get_empty_squares()
        motion = empty[random.randrange(len(empty))]
        board.move(motion[0],motion[1],player)
        if player == provided.PLAYERX:
            player = provided.PLAYERO
        else:
            player = provided.PLAYERX
    return 
    
def mc_update_scores(scores, board, player):
    """
    The function score the completed board and update the scores grid.
    """
    for row in range(len(scores)):
        for col in range(len(scores[0])):
            if player == board.check_win():
                if board.square(row, col) == player:
                    scores[row][col] += SCORE_CURRENT
                elif board.square(row, col) == provided.EMPTY:
                    scores[row][col] += 0
                else:
                    scores[row][col] -= SCORE_CURRENT
            elif board.check_win() != provided.DRAW:
                if board.square(row, col) == player:
                    scores[row][col] -= SCORE_OTHER
                elif board.square(row, col) == provided.EMPTY:
                    scores[row][col] += 0
                else:
                    scores[row][col] += SCORE_OTHER
            else:
                scores[row][col] += 0

def get_best_move(board, scores):
    """
    This function takes a current board and a grid of scores.
    """
    level = - 100
    for empty in board.get_empty_squares():
        if scores[empty[0]][empty[1]] > level:
            level = scores[empty[0]][empty[1]]
            hrow = empty[0]
            hcol = empty[1]
    return (hrow, hcol)
    

def mc_move(board, player, trials):
    """
    The function uses the Monte Carlo simulation.
    """
    dim = board.get_dim()
    scores = [[0*col*row for col in range(dim)]for row in range(dim)]
    for itert in range(trials):
        copy = board.clone()
        mc_trial(copy, player)
        mc_update_scores(scores, copy, player)
        itert += itert * 0
    move = get_best_move(board, scores)
    return (move[0], move[1])
# Test game with the console or the GUI.  Uncomment whichever 
# you prefer.  Both should be commented out when you submit 
# for testing to save time.

#provided.play_game(mc_move, NTRIALS, False)        
poc_ttt_gui.run_gui(3, provided.PLAYERX, mc_move, NTRIALS, False)
